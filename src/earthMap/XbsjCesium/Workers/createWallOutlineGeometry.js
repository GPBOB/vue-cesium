/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2020 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./when-4ca4e419","./Check-430b3551","./Math-c0afb7aa","./Cartesian2-0cd32dae","./defineProperties-24e785e9","./Transforms-1f147cce","./RuntimeError-443472b0","./WebGLConstants-2ddfa2f9","./ComponentDatatype-adb4702b","./GeometryAttribute-ebf6a4c7","./GeometryAttributes-614c63f8","./IndexDatatype-a78bfe07","./IntersectionTests-9618f995","./Plane-6d029ea4","./EllipsoidTangentPlane-6e29c6f6","./EllipsoidRhumbLine-aeb03c9a","./PolygonPipeline-d378df2d","./EllipsoidGeodesic-f0d5153e","./PolylinePipeline-1211a424","./WallGeometryLibrary-9676c43f"],function(w,e,G,L,i,x,t,a,T,V,D,I,n,r,o,s,l,d,m,S){"use strict";var R=new L.Cartesian3,M=new L.Cartesian3;function u(e){var i=(e=w.defaultValue(e,w.defaultValue.EMPTY_OBJECT)).positions,t=e.maximumHeights,a=e.minimumHeights,n=w.defaultValue(e.granularity,G.CesiumMath.RADIANS_PER_DEGREE),r=w.defaultValue(e.ellipsoid,L.Ellipsoid.WGS84);this._positions=i,this._minimumHeights=a,this._maximumHeights=t,this._granularity=n,this._ellipsoid=L.Ellipsoid.clone(r),this._workerName="createWallOutlineGeometry";var o=1+i.length*L.Cartesian3.packedLength+2;w.defined(a)&&(o+=a.length),w.defined(t)&&(o+=t.length),this.packedLength=o+L.Ellipsoid.packedLength+1}u.pack=function(e,i,t){var a;t=w.defaultValue(t,0);var n=e._positions,r=n.length;for(i[t++]=r,a=0;a<r;++a,t+=L.Cartesian3.packedLength)L.Cartesian3.pack(n[a],i,t);var o=e._minimumHeights;if(r=w.defined(o)?o.length:0,i[t++]=r,w.defined(o))for(a=0;a<r;++a)i[t++]=o[a];var s=e._maximumHeights;if(r=w.defined(s)?s.length:0,i[t++]=r,w.defined(s))for(a=0;a<r;++a)i[t++]=s[a];return L.Ellipsoid.pack(e._ellipsoid,i,t),i[t+=L.Ellipsoid.packedLength]=e._granularity,i};var p=L.Ellipsoid.clone(L.Ellipsoid.UNIT_SPHERE),f={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:p,granularity:void 0};return u.unpack=function(e,i,t){var a;i=w.defaultValue(i,0);var n,r,o=e[i++],s=new Array(o);for(a=0;a<o;++a,i+=L.Cartesian3.packedLength)s[a]=L.Cartesian3.unpack(e,i);if(0<(o=e[i++]))for(n=new Array(o),a=0;a<o;++a)n[a]=e[i++];if(0<(o=e[i++]))for(r=new Array(o),a=0;a<o;++a)r[a]=e[i++];var l=L.Ellipsoid.unpack(e,i,p),d=e[i+=L.Ellipsoid.packedLength];return w.defined(t)?(t._positions=s,t._minimumHeights=n,t._maximumHeights=r,t._ellipsoid=L.Ellipsoid.clone(l,t._ellipsoid),t._granularity=d,t):(f.positions=s,f.minimumHeights=n,f.maximumHeights=r,f.granularity=d,new u(f))},u.fromConstantHeights=function(e){var i,t,a=(e=w.defaultValue(e,w.defaultValue.EMPTY_OBJECT)).positions,n=e.minimumHeight,r=e.maximumHeight,o=w.defined(n),s=w.defined(r);if(o||s){var l=a.length;i=o?new Array(l):void 0,t=s?new Array(l):void 0;for(var d=0;d<l;++d)o&&(i[d]=n),s&&(t[d]=r)}return new u({positions:a,maximumHeights:t,minimumHeights:i,ellipsoid:e.ellipsoid})},u.createGeometry=function(e){var i=e._positions,t=e._minimumHeights,a=e._maximumHeights,n=e._granularity,r=e._ellipsoid,o=S.WallGeometryLibrary.computePositions(r,i,a,t,n,!1);if(w.defined(o)){var s,l=o.bottomPositions,d=o.topPositions,m=d.length,u=2*m,p=new Float64Array(u),f=0;for(m/=3,s=0;s<m;++s){var h=3*s,c=L.Cartesian3.fromArray(d,h,R),g=L.Cartesian3.fromArray(l,h,M);p[f++]=g.x,p[f++]=g.y,p[f++]=g.z,p[f++]=c.x,p[f++]=c.y,p[f++]=c.z}var y=new D.GeometryAttributes({position:new V.GeometryAttribute({componentDatatype:T.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:p})}),v=u/3;u=2*v-4+v;var E=I.IndexDatatype.createTypedArray(v,u),_=0;for(s=0;s<v-2;s+=2){var C=s,b=s+2,H=L.Cartesian3.fromArray(p,3*C,R),A=L.Cartesian3.fromArray(p,3*b,M);if(!L.Cartesian3.equalsEpsilon(H,A,G.CesiumMath.EPSILON10)){var P=s+1,k=s+3;E[_++]=P,E[_++]=C,E[_++]=P,E[_++]=k,E[_++]=C,E[_++]=b}}return E[_++]=v-2,E[_++]=v-1,new V.Geometry({attributes:y,indices:E,primitiveType:V.PrimitiveType.LINES,boundingSphere:new x.BoundingSphere.fromVertices(p)})}},function(e,i){return w.defined(i)&&(e=u.unpack(e,i)),e._ellipsoid=L.Ellipsoid.clone(e._ellipsoid),u.createGeometry(e)}});
